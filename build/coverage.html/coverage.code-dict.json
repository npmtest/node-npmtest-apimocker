{"/home/travis/build/npmtest/node-npmtest-apimocker/test.js":"/* istanbul instrument in package npmtest_apimocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apimocker/lib.npmtest_apimocker.js":"/* istanbul instrument in package npmtest_apimocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apimocker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apimocker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apimocker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apimocker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apimocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apimocker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apimocker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apimocker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apimocker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apimocker.__dirname + '/lib.npmtest_apimocker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apimocker/node_modules/apimocker/lib/apimocker.js":"var express = require('express'),\n\t_ = require('underscore'),\n\tpath = require('path'),\n\tfs = require('fs'),\n\tbodyParser = require('body-parser'),\n\txmlparser = require('express-xml-bodyparser'),\n\tapiMocker = {},\n\tjsonPath = require('JSONPath'),\n\tuntildify = require('untildify'),\n\tutil = require('util'),\n\tproxy = require('express-http-proxy');\n\napiMocker.defaults = {\n\t'port': '8888',\n\t'mockDirectory': './mocks/',\n\t'allowedDomains': ['*'],\n\t'allowedHeaders': ['Content-Type'],\n\t'logRequestHeaders': false,\n\t'webServices': {}\n};\n\napiMocker.createServer = function(options) {\n\toptions = options || {};\n\n\tfunction logger(msg, obj) {\n\t\tif (!options.quiet) {\n\t\t\tif (obj) {\n\t\t\t\tconsole.log(msg, obj);\n\t\t\t} else {\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t}\n\t};\n\n\tapiMocker.express = express();\n\tapiMocker.middlewares = [];\n\n\tvar saveBody;\n\tif (options.proxyURL) {\n\t\tsaveBody = function (req, res, buf) {\n\t\t\treq.rawBody = buf;\n\t\t};\n\t}\n\tapiMocker.middlewares.push(bodyParser.urlencoded({\n\t\textended: true,\n\t\tverify: saveBody\n\t}));\n\tapiMocker.middlewares.push(bodyParser.json({\n\t\tverify: saveBody\n\t}));\n\tapiMocker.middlewares.push(xmlparser());\n\tapiMocker.middlewares.push(apiMocker.corsMiddleware);\n\n\t// new in Express 4, we use a Router now.\n\tapiMocker.router = express.Router();\n\tapiMocker.middlewares.push(apiMocker.router);\n\n\tif (options.proxyURL) {\n\t\tlogger(\"Proxying to \" + options.proxyURL);\n\t\tvar proxyOptions = {\n\t\t  forwardPath: function (req) {\n\t\t\tlogger(\"Forwarding request: \" + req.originalUrl);\n\t\t\treturn req.originalUrl;\n\t\t  }\n\t\t};\n\n\t\tif (options.proxyIntercept) {\n\t\t\tvar interceptPath = path.join(process.cwd(), options.proxyIntercept);\n\t\t\tlogger(\"Loading proxy intercept from \" + interceptPath);\n\t\t\tproxyOptions.intercept = require(interceptPath);\n\t\t}\n\n\t\tapiMocker.middlewares.push(function (req, res, next) {\n\t\t\tif (req.rawBody) {\n\t\t\t\treq.body = req.rawBody;\n\t\t\t}\n\t\t\tnext();\n\t\t});\n\t\tapiMocker.middlewares.push(proxy(options.proxyURL, proxyOptions));\n\t}\n\n\tapiMocker.options = _.defaults(options, apiMocker.defaults);\n\tapiMocker.log = logger;\n\treturn apiMocker;\n};\n\napiMocker.setConfigFile = function (file) {\n\tif (!file) {\n\t\treturn apiMocker;\n\t} else if (path.sep !== file.substr(0,1)) {\n\t\t//relative path from command line\n\t\tapiMocker.configFilePath = path.resolve(process.cwd(), file);\n\t} else {\n\t\tapiMocker.configFilePath = file;\n\t}\n\treturn apiMocker;\n};\n\napiMocker.loadConfigFile = function() {\n\tif (apiMocker.configFilePath) {\n\t\tapiMocker.log('Loading config file: ' + apiMocker.configFilePath);\n\t\t// Switched to use fs.readFileSync instead of 'require'\n\t\t//\tthis makes testing easier, and avoids messing with require cache.\n\t\tvar newOptions = _.clone(apiMocker.defaults),\n\t\t\tconfigJson = JSON.parse(fs.readFileSync(apiMocker.configFilePath));\n\t\tif (process.env.VCAP_APP_PORT) {\n\t\t\t// we're running in cloudfoundry, and we need to use the VCAP port.\n\t\t\tconfigJson.port = process.env.VCAP_APP_PORT;\n\t\t}\n\t\tnewOptions = _.extend(newOptions, apiMocker.options, configJson);\n\t\tnewOptions.mockDirectory = untildify(newOptions.mockDirectory);\n\t\tapiMocker.options = newOptions;\n\n\t\t_.each(apiMocker.options.webServices, function (svc) {\n\t\t\t_.each(svc.alternatePaths, function (path) {\n\t\t\t\tvar altSvc = _.clone(svc);\n\t\t\t\tapiMocker.options.webServices[path] = altSvc;\n\t\t\t});\n\t\t});\n\n\t\tapiMocker.setRoutes(apiMocker.options.webServices);\n\t} else {\n\t\tapiMocker.log('No config file path set.');\n\t}\n};\n\napiMocker.createAdminServices = function() {\n\tapiMocker.router.all('/admin/reload', function(req, res) {\n\t\tapiMocker.stop();\n\t\tapiMocker.createServer(apiMocker.options).start();\n\n\t\tres.writeHead(200, {'Content-Type': 'application/json'});\n\t\tres.end('{\"configFilePath\": \"' + apiMocker.configFilePath + '\", \"reloaded\": \"true\"}');\n\t});\n\n\tapiMocker.router.all('/admin/setMock', function(req, res) {\n\t\tvar newRoute = {};\n\t\tif (req.body.serviceUrl && req.body.verb && req.body.mockFile) {\n\t\t\tapiMocker.log('Received JSON request: ' + JSON.stringify(req.body));\n\t\t\tnewRoute = req.body;\n\t\t\tnewRoute.verb = newRoute.verb.toLowerCase();\n\t\t} else {\n\t\t\tnewRoute.verb = req.param('verb').toLowerCase();\n\t\t\tnewRoute.serviceUrl = req.param('serviceUrl');\n\t\t\tnewRoute.mockFile = req.param('mockFile');\n\t\t\tnewRoute.latency = req.param('latency');\n\t\t\tnewRoute.contentType = req.param('contentType');\n\t\t}\n\t\t// also need to save in our webServices object.\n\t\tdelete apiMocker.options.webServices[newRoute.serviceUrl];\n\t\tapiMocker.options.webServices[newRoute.serviceUrl] = newRoute;\n\t\tapiMocker.setRoute(newRoute);\n\n\t\tres.writeHead(200, {'Content-Type': 'application/json'});\n\t\tres.end(JSON.stringify(newRoute));\n\t});\n};\n\napiMocker.setRoutes = function(webServices) {\n\tvar topLevelKeys = _.keys(webServices);\n\t_.each(topLevelKeys, function(key) {\n\t\tvar svc = _.clone(webServices[key]);\n\t\t// apiMocker.log('about to add a new service: ' + JSON.stringify(svc));\n\t\t_.each(svc.verbs, function(v) {\n\t\t\tapiMocker.setRoute(apiMocker.getServiceRoute(key, v));\n\t\t});\n\t});\n};\n\napiMocker.getServiceRoute = function(path, verb) {\n\n\tvar finalSvc = _.clone(apiMocker.options.webServices[path]);\n\tfinalSvc.verb = verb.toLowerCase();\n\tfinalSvc.serviceUrl = path;\n\tif (finalSvc.responses) {\n\t\tfinalSvc = _.extend(finalSvc, finalSvc.responses[verb]);\n\t}\n\tif (typeof finalSvc.latency === 'undefined') {\n\t\tfinalSvc.latency = apiMocker.options.latency ? apiMocker.options.latency : 0;\n\t}\n\n\tdelete finalSvc.responses;\n\tdelete finalSvc.verbs;\n\treturn finalSvc;\n};\n\n// Fills in templated Values.\napiMocker.fillTemplate = function(data, req){\n\n\tfor(var templateString in req.params){\n\t\tdata = data.replace(new RegExp('@'+templateString,'g'), req.param(templateString));\n\t}\n\n\treturn data;\n};\n\napiMocker.fillTemplateSwitch = function(options, data){\n\tvar switches = options.templateSwitch;\n\n\tswitches.forEach(function(s){\n\t\tvar key, value;\n\n\t\tif (!(s instanceof Object)) {\n\t\t\tkey = switches[s].key;\n\t\t\tvalue = switches[s].value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkey = s.key;\n\t\t\tvalue = s.value;\n\t\t}\n\n\t\tif(typeof value !== null)\n\t\t{\n\t\t\tapiMocker.log('fillTemplateSwitch -> search for @' + key + ' replace with ' + value);\n\t\t\tdata = data.replace(new RegExp('@'+key,'g'), value);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapiMocker.log('fillTemplateSwitch -> skipping search for @' + key + ' with no value.');\n\t\t}\n\n\t});\n\n\treturn data;\n};\n\napiMocker.sendResponse = function(req, res, serviceKeys) {\n\tvar originalOptions, mockPath;\n\t// we want to look up the service info from our in-memory 'webServices' every time.\n\tvar options = apiMocker.getServiceRoute(serviceKeys.serviceUrl, serviceKeys.verb);\n\n\tsetTimeout(function() {\n\n\t\tif (options.httpStatus === 204 || options.httpStatus === 304) {\n\t\t\t// express handles these two differently - it strips out body, content-type, and content-length headers.\n\t\t\t// there's no body or content-length, so we just send the status code.\n\t\t\tapiMocker.log('Returning http status: ' + options.httpStatus);\n\t\t\tres.send(options.httpStatus);\n\t\t\treturn;\n\t\t}\n\t\tif (options.switch) {\n\t\t\toptions = _.clone(options);\n\t\t\toriginalOptions = _.clone(options);\n\t\t\tapiMocker.setSwitchOptions(options, req);\n\t\t\tmockPath = path.join(apiMocker.options.mockDirectory, options.mockFile || '');\n\t\t\tif (!fs.existsSync(mockPath)) {\n\t\t\t\tapiMocker.log('No file found: ' + options.mockFile + ' attempting base file: ' + originalOptions.mockFile);\n\t\t\t\toptions.mockFile = originalOptions.mockFile;\n\t\t\t}\n\t\t}\n\n\t\tif (options.templateSwitch) {\n\t\t\tapiMocker.setTemplateSwitchOptions(options, req);\n\t\t}\n\n\t\tif(apiMocker.options.logRequestHeaders) {\n\t\t\tapiMocker.log('Request headers:');\n\t\t\tapiMocker.log(req.headers);\n\t\t}\n\n\t\tif (options.headers) {\n\t\t\tres.header(options.headers);\n\t\t}\n\n\t\tif (!options.mockFile) {\n\t\t\tvar status = options.httpStatus || 404;\n\t\t\tapiMocker.log('No mockFile found.  Returning httpStatus: ', status);\n\t\t\tres.status(status).send();\n\t\t\treturn;\n\t\t}\n\n\t\tmockPath = path.join(apiMocker.options.mockDirectory, options.mockFile);\n\t\tapiMocker.log('Returning mock: ' + options.verb.toUpperCase() + ' ' + options.serviceUrl + ' : ' +\n\t\t\t\toptions.mockFile);\n\n\t\tfs.exists(mockPath, function(exists) {\n\t\t\tif (exists) {\n\t\t\t\tif (options.contentType) {\n\t\t\t\t\tres.header('Content-Type', options.contentType);\n\t\t\t\t\tfs.readFile(mockPath, {encoding: 'utf8'}, function(err, data) {\n\t\t\t\t\t\tif (err) { throw err; }\n\n\t\t\t\t\t\tif(options.templateSwitch){\n\t\t\t\t\t\t\tdata = apiMocker.fillTemplateSwitch(options, data, req);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(options.enableTemplate === true){\n\t\t\t\t\t\t\tdata = apiMocker.fillTemplate(data, req);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar buff = new Buffer(data, 'utf8');\n\n\t\t\t\t\t\tres.status(options.httpStatus || 200).send(buff);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tres.status(options.httpStatus || 200).sendfile(encodeURIComponent(options.mockFile), {root: apiMocker.options.mockDirectory});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tres.send(options.httpStatus || 404);\n\t\t\t}\n\t\t});\n\t}, options.latency);\n};\n\n// only used when there is a switch configured\napiMocker.setSwitchOptions = function(options, req) {\n\tvar switchFilePrefix = '', switchParamValue,\n\t\tmockFileParts, mockFilePrefix = '', mockFileBaseName;\n\n\tvar switches = options.switch;\n\tif(!(switches instanceof Array)){\n\t\tswitches = [switches];\n\t}\n\n\tswitches.forEach(function(s){\n\t\tswitchParamValue = null;\n\t\tvar switchObject = s,\n\t\t\tspecific = true;\n\n\t\tif (!(s instanceof Object)) {\n\t\t\t// The user didn't configure a switch object. Make one.\n\t\t\tswitchObject = {\n\t\t\t\tkey: s,\n\t\t\t\tswitch: s,\n\t\t\t\ttype: 'default'\n\t\t\t};\n\n\t\t\tif (s.match(/\\/(.+)\\//)) {\n\t\t\t\tswitchObject.type = 'regexp';\n\t\t\t} else if (s.indexOf('$') === 0) {\n\t\t\t\tswitchObject.type = 'jsonpath';\n\t\t\t}\n\n\t\t\t// As we had no switch object, we have to test default-type first to\n\t\t\t// mimic the old behaviour.\n\t\t\tspecific = false;\n\t\t}\n\n\t\tif (!switchObject.hasOwnProperty('key')) {\n\t\t\t// Add key if the user was too lazy\n\t\t\tswitchObject.key = switchObject.switch;\n\t\t}\n\n\t\t// Sanity check the switchobject\n\t\tif (\n\t\t\t!switchObject.hasOwnProperty('switch') ||\n\t\t\t!switchObject.hasOwnProperty('type') ||\n\t\t\t!switchObject.hasOwnProperty('key')\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!specific || switchObject.type === 'default') {\n\n\t\t\tif (req.body[switchObject.switch]) { // json post request\n\t\t\t\tswitchParamValue = encodeURIComponent( req.body[switchObject.switch] );\n\t\t\t} else if (req.param(switchObject.switch)) { // query param in get request\n\t\t\t\tswitchParamValue = encodeURIComponent( req.param(switchObject.switch));\n\t\t\t} else if (req.headers) { // check for switch in header param\n\t\t\t\tfor (var h in req.headers) {\n\t\t\t\t\tif (req.headers.hasOwnProperty(h) && h.toLowerCase() === switchObject.switch.toLowerCase()) {\n\t\t\t\t\t\tswitchParamValue = encodeURIComponent(req.headers[h]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (!switchParamValue) {\n\n\t\t\tif (switchObject.type === 'regexp') {\n\t\t\t\tvar regexpTest = switchObject.switch.match(/\\/(.+)\\//);\n\t\t\t\tif (regexpTest) { // A regexp switch\n\t\t\t\t\tvar searchBody = req.body;\n\n\t\t\t\t\tif (typeof(req.body) !== 'string') {\n\t\t\t\t\t\t// We don't have a body string, parse it in JSON\n\t\t\t\t\t\tsearchBody = JSON.stringify(req.body);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar regexpSwitch = new RegExp(regexpTest[1]).exec(searchBody);\n\t\t\t\t\tif (regexpSwitch) {\n\t\t\t\t\t\t// Value is the first group\n\t\t\t\t\t\tswitchParamValue = encodeURIComponent(regexpSwitch[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//use JsonPath - use first value found if multiple occurances exist\n\t\t\t\tvar allElems = jsonPath.eval(req.body, switchObject.switch);\t// jshint ignore:line\n\t\t\t\tif (allElems.length > 0) {\n\t\t\t\t\tswitchParamValue = encodeURIComponent(allElems[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (switchParamValue) {\n\t\t\tswitchFilePrefix = switchFilePrefix + switchObject.key + switchParamValue;\n\t\t}\n\t});\n\n\tif(!switchFilePrefix){\n\t\treturn;\n\t}\n\n\tif (options.switchResponses && options.switchResponses[switchFilePrefix]) {\n\t\t_.extend(options, options.switchResponses[switchFilePrefix]);\n\t\tif (options.switchResponses[switchFilePrefix].mockFile) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (options.mockFile) {\n\t\tmockFileParts = options.mockFile.split('/');\n\t\tmockFileBaseName = mockFileParts.pop();\n\t\tif (mockFileParts.length > 0) {\n\t\t\tmockFilePrefix = mockFileParts.join('/') + '/';\n\t\t}\n\t\toptions.mockFile = mockFilePrefix + switchFilePrefix + '.' + mockFileBaseName;\n\t}\n};\n\n// only used when there is a templateSwitch configured\napiMocker.setTemplateSwitchOptions = function(options, req) {\n\tvar switchParamValue;\n\n\tvar switches = options.templateSwitch;\n\tif(!(switches instanceof Array)){\n\t\tswitches = [switches];\n\t}\n\n\tswitches.forEach(function(s){\n\t\tswitchParamValue = null;\n\t\tvar switchObject = s,\n\t\t\tspecific = true;\n\n\t\tif (!(s instanceof Object)) {\n\t\t\t// The user didn't configure a switch object. Make one.\n\t\t\tswitchObject = {\n\t\t\t\tkey: s,\n\t\t\t\tswitch: s,\n\t\t\t\ttype: 'default',\n\t\t\t\tvalue: null\n\t\t\t};\n\n\t\t\tif (s.match(/\\/(.+)\\//)) {\n\t\t\t\tswitchObject.type = 'regexp';\n\t\t\t} else if (s.indexOf('$') === 0) {\n\t\t\t\tswitchObject.type = 'jsonpath';\n\t\t\t}\n\n\t\t\t// As we had no switch object, we have to test default-type first to\n\t\t\t// mimic the old behaviour.\n\t\t\tspecific = false;\n\t\t}\n\n\t\tif (!switchObject.hasOwnProperty('key')) {\n\t\t\t// Add key if the user was too lazy\n\t\t\tswitchObject.key = switchObject.switch;\n\t\t}\n\n\t\t// Sanity check the switchobject\n\t\tif (\n\t\t\t!switchObject.hasOwnProperty('switch') ||\n\t\t\t!switchObject.hasOwnProperty('type') ||\n\t\t\t!switchObject.hasOwnProperty('key')\n\t\t\t) {\n\t\t\tapiMocker.log('templateSwitch invalid config: missing switch, type or key property. Aborting templateSwitch for this request.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!specific || switchObject.type === 'default') {\n\t\t\tif (req.body[switchObject.switch]) { // json post request\n\t\t\t\tswitchParamValue = encodeURIComponent( req.body[switchObject.switch] );\n\t\t\t} else if (req.param(switchObject.switch)) { // query param in get request\n\t\t\t\tswitchParamValue = encodeURIComponent( req.param(switchObject.switch));\n\t\t\t} else if (req.headers) { // check for switch in header param\n\t\t\t\tfor (var h in req.headers) {\n\t\t\t\t\tif (req.headers.hasOwnProperty(h) && h.toLowerCase() === switchObject.switch.toLowerCase()) {\n\t\t\t\t\t\tswitchParamValue = encodeURIComponent(req.headers[h]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (!switchParamValue) {\n\t\t\tif (switchObject.type === 'regexp') {\n\t\t\t\tvar regexpTest = switchObject.switch.match(/\\/(.+)\\//);\n\t\t\t\tif (regexpTest) { // A regexp switch\n\t\t\t\t\tvar searchBody = req.body;\n\n\t\t\t\t\tif (typeof(req.body) !== 'string') {\n\t\t\t\t\t\t// We don't have a body string, parse it in JSON\n\t\t\t\t\t\tsearchBody = JSON.stringify(req.body);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar regexpSwitch = new RegExp(regexpTest[1]).exec(searchBody);\n\t\t\t\t\tif (regexpSwitch) {\n\t\t\t\t\t\t// Value is the first group\n\t\t\t\t\t\tswitchParamValue = encodeURIComponent(regexpSwitch[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//use JsonPath - use first value found if multiple occurances exist\n\t\t\t\tvar allElems = jsonPath.eval(req.body, switchObject.switch);\t// jshint ignore:line\n\t\t\t\tif (allElems.length > 0) {\n\t\t\t\t\tswitchParamValue = encodeURIComponent(allElems[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (switchParamValue) {\n\t\t\tswitchObject.value = switchParamValue;\n\t\t\toptions.templateSwitch[s] = switchObject;\n\t\t}\n\t\telse {\n\t\t\tapiMocker.log('templateSwitch[' + switchObject.switch + '] value NOT FOUND');\n\t\t}\n\t});\n};\n\n\n// Sets the route for express, in case it was not set yet.\napiMocker.setRoute = function(options) {\n\tvar displayFile = options.mockFile || '<no mockFile>',\n\t\tdisplayLatency = options.latency ? options.latency + ' ms' : '';\n\n\tapiMocker.router[options.verb]('/' + options.serviceUrl, function(req, res) {\n\t\tapiMocker.sendResponse(req, res, options);\n\t});\n\tapiMocker.log('Set route: ' + options.verb.toUpperCase() + ' ' + options.serviceUrl + ' : ' +\n\t\t\tdisplayFile + ' ' + displayLatency);\n\tif (options.switch) {\n\t\tvar switchDescription = options.switch;\n\t\tif (options.switch instanceof Array || options.switch instanceof Object) {\n\t\t\tswitchDescription = util.inspect(options.switch);\n\t\t}\n\t\tapiMocker.log('\t with switch on param: ' + switchDescription);\n\t}\n};\n\n// CORS middleware\napiMocker.corsMiddleware = function(req, res, next) {\n\tvar allowedHeaders = apiMocker.options.allowedHeaders.join(',');\n\tres.header('Access-Control-Allow-Origin', apiMocker.options.allowedDomains);\n\tres.header('Access-Control-Allow-Methods', 'GET,PUT,POST,PATCH,DELETE');\n\tres.header('Access-Control-Allow-Headers', allowedHeaders);\n\n\tnext();\n};\n\napiMocker.start = function (port, callback) {\n\tapiMocker.createAdminServices();\n\tapiMocker.loadConfigFile();\n\tapiMocker.middlewares.forEach(function(mw) {\n\t\tif (mw === apiMocker.router && apiMocker.options.basepath) {\n\t\t\tapiMocker.log('Using basepath: ', apiMocker.options.basepath);\n\t\t\tapiMocker.express.use(apiMocker.options.basepath, mw);\n\t\t} else {\n\t\t\tapiMocker.express.use(mw);\n\t\t}\n\t});\n\tport = port || apiMocker.options.port;\n\t// console.log(JSON.stringify(apiMocker.options));\n\tif (apiMocker.options.staticDirectory && apiMocker.options.staticPath) {\n\t\tapiMocker.express.use(apiMocker.options.staticPath, express.static(apiMocker.options.staticDirectory));\n\t}\n\n\tapiMocker.expressInstance = apiMocker.express.listen(port, callback);\n\tapiMocker.log('Mock server listening on port ' + port);\n\treturn apiMocker;\n};\n\napiMocker.stop = function(callback) {\n\tif (apiMocker.expressInstance) {\n\t\tapiMocker.log('Stopping mock server.');\n\t\tapiMocker.expressInstance.close(callback);\n\t}\n\treturn apiMocker;\n};\n\n// expose all the 'public' methods.\nexports.createServer = apiMocker.createServer;\nexports.start = apiMocker.start;\nexports.setConfigFile = apiMocker.setConfigFile;\nexports.stop = apiMocker.stop;\nexports.middlewares = apiMocker.middlewares;\n","/home/travis/build/npmtest/node-npmtest-apimocker/node_modules/apimocker/Gruntfile.js":"// # Globbing (tip thanks to Yeoman)\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to match all subfolders:\n// 'test/spec/**/*.js'\n\n/*global module:false*/\nmodule.exports = function (grunt) {\n    'use strict';\n\n    grunt.initConfig({\n\n        mochacli: {\n            options: {\n              globals: ['should'],\n              timeout: 3000,\n              ignoreLeaks: false,\n              ui: 'bdd',\n              reporter: 'spec'\n            },\n\n            all: { src: 'test/{,*/}*.js' }\n        },\n\n        watch: {\n            files: [\n                'Gruntfile.js',\n                'lib/apimocker.js',\n                'test/{,*/}*.js'\n            ],\n            tasks: ['jshint', 'test']\n        },\n\n        jshint: {\n            all: [\n                'Gruntfile.js',\n                'lib/apimocker.js',\n                'test/{,*/}*.js'\n            ]\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-mocha-cli');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n\n    grunt.registerTask('test', [\n        'mochacli'\n    ]);\n\n    grunt.registerTask('default', [\n        'jshint',\n        'test'\n    ]);\n};\n","/home/travis/build/npmtest/node-npmtest-apimocker/node_modules/apimocker/bin/apimocker.js":"#!/usr/bin/env node\nvar pkg = require(\"../package.json\"),\n    commander = require(\"commander\"),\n    ApiMocker = require(\"../lib/apimocker.js\");\n\ncommander\n    .version(pkg.version)\n    .option(\"-c, --config <path>\", \"Path to config.json file.\", __dirname + \"/../config.json\")\n    .option(\"-q, --quiet\", \"Disable console logging.\")\n    .option(\"-p, --port <port>\", \"Port that the http mock server will use. Default is 8888.\", \"8888\")\n    .option(\"-f, --proxy <proxyURL>\", \"URL of a real service to proxy to, for endpoints that are not mocked.\", false)\n    .option(\"-i, --intercept <proxyIntercept>\", \"Path to a module that exports an express-http-proxy intercept function\")\n    .parse(process.argv);\n\nvar options = {};\noptions.port = commander.port;\noptions.quiet = !!commander.quiet;\noptions.proxyURL = commander.proxy;\noptions.proxyIntercept = commander.intercept\n\nvar apiMocker = ApiMocker.createServer(options)\n    .setConfigFile(commander.config)\n    .start();\n"}